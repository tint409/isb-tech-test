// <auto-generated />
using System;
using ISBTest.DAL.DataProviders;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ISBTest.DAL.Migrations
{
    [DbContext(typeof(ISBTestDbContext))]
    [Migration("20240707101804_OtherTables")]
    partial class OtherTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ISBTest.DAL.Entities.Contact", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ISBTest.DAL.Entities.OwnershipChange", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AskingPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SoldPrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoldPriceAtUsd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId", "EffectiveDate");

                    b.HasIndex("ContactId");

                    b.ToTable("OwnershipChange");
                });

            modelBuilder.Entity("ISBTest.DAL.Entities.Property", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            Id = new Guid("872a1a41-cb52-4db9-ac88-4e04ddb5e67d"),
                            Address = "Address 1",
                            CreatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2304),
                            DateOfRegistration = new DateTime(2024, 7, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Name 1",
                            Price = "USD 10000.00",
                            UpdatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2305)
                        },
                        new
                        {
                            Id = new Guid("bf987682-1335-4ecb-808d-51c6bf3a7ed3"),
                            Address = "Address 2",
                            CreatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2311),
                            DateOfRegistration = new DateTime(2024, 7, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Name 2",
                            Price = "USD 20000.00",
                            UpdatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2311)
                        },
                        new
                        {
                            Id = new Guid("b456b0aa-57cf-4d84-82e9-6347c3c6dcf1"),
                            Address = "Address 3",
                            CreatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2328),
                            DateOfRegistration = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Name 3",
                            Price = "USD 30000.00",
                            UpdatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2328)
                        },
                        new
                        {
                            Id = new Guid("fe9e1bb2-1528-429b-909f-71d7126285e1"),
                            Address = "Address 4",
                            CreatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2331),
                            DateOfRegistration = new DateTime(2024, 7, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Name 4",
                            Price = "USD 40000.00",
                            UpdatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2332)
                        },
                        new
                        {
                            Id = new Guid("cbe6114c-7a72-400b-98fa-86d725a8cb22"),
                            Address = "Address 5",
                            CreatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2334),
                            DateOfRegistration = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Name 5",
                            Price = "USD 50000.00",
                            UpdatedAt = new DateTime(2024, 7, 7, 10, 18, 4, 727, DateTimeKind.Utc).AddTicks(2334)
                        });
                });

            modelBuilder.Entity("ISBTest.DAL.Entities.OwnershipChange", b =>
                {
                    b.HasOne("ISBTest.DAL.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ISBTest.DAL.Entities.Property", "Property")
                        .WithMany("OwnershipChanges")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("ISBTest.DAL.Entities.Property", b =>
                {
                    b.Navigation("OwnershipChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
